- name:
  comparisons:
  - label: Version used
    frameworks:
      react: 15.0.2
      angular2: 2.0.0-beta.17
      angular1: 1.5.5
      polymer: 1.4.0
      vue: 1.0.24
  - label: Language used
    frameworks:
      react: ES6
      angular2: TypeScript
      angular1: ES5
      polymer: ES6
      vue: ES6

- name: Components
  comparisons:
  - label: Define Component
    frameworks:
      react:
        js: class Polyglot extends React.Component
      angular2:
        js: "@Component({})class Polyglot {}"
      angular1:
        js: module.component('polyglot', {})
      polymer:
        js: class Polyglot extends HTMLElement
      vue:
        js: class Polyglot extends Vue
    remarks: |
      - **Polymer:** See [Building web components using ES6 classes](https://www.polymer-project.org/1.0/articles/es6.html)
      - **Vue:** See gist: [Vue.js + ES6](https://gist.github.com/k33g/f4ea54b6a2cf9555b959)

- name: Component communication
  comparisons:
  - label: One-way data binding
    frameworks:
      react: <Child foo={bar} />
      angular2: <Child [foo]="bar" />
      angular1: <Child foo='scope.bar' />
      polymer: '<Child foo="{{ bar }}" />'
      vue: <Child :foo='bar' />
    remarks: |
      - **Polymer:** Learn more about [data binding in Polymer](https://www.polymer-project.org/1.0/docs/devguide/data-binding.html).
  - label: String literal prop
    frameworks:
      react: <Child foo='bar' />
      angular2: <Child foo='bar' />
      angular1: <Child foo='bar' />
      polymer: <Child foo='bar' />
      vue: <Child foo='bar' />
  - label: Two-way data binding
    frameworks:
      react:
        js: // not supported
      angular2: <Child [(foo)]="bar" />
      angular1: <input ng-model="foo" />
      polymer:
      vue: <input v-model="foo" />

- name: Property validation
  comparisons:
  - label: Prop validation key
    frameworks:
      react:
        js: "{propTypes: {}}"
      angular2:
        js: // as types on @Input properties
      angular1:
      polymer:
        js: "{properties: {}}"
      vue:
        js: "{props: {}}"
    remarks: |
      The key in the component configuration object to define the expected type of a passed prop.

      ```
      class Polyglot extends React.Component {
        propTypes = {
          myNumber: React.propTypes.number
        }
      }
      ```

      - **React:** Learn more about [`propTypes` in React](https://facebook.github.io/react/docs/reusable-components.html#prop-validation).
      - **Polymer:** Learn more about [declared properties in Polymer](https://www.polymer-project.org/1.0/docs/devguide/properties.html).
      - **Vue:** Learn more about [prop validation in Vue](https://vuejs.org/guide/components.html#Prop-Validation).
  - label: Prop validate Number
    frameworks:
      react:
        js: "{myNum: React.PropTypes.number}"
      angular2:
        js: "@Input() myNum: number;"
      angular1:
      polymer:
        js: "{myNum: Number}"
      vue:
        js: "{myNum: Number}"
  - label: Prop validate String
    frameworks:
      react:
        js: "{myStr: React.PropTypes.string}"
      angular2:
        js: "@Input() myStr: string;"
      angular1:
      polymer:
        js: "{myStr: String}"
      vue:
        js: "{myStr: String}"
  - label: Prop validate union
    frameworks:
      react:
        js: "{myVar: React.PropTypes.oneOfType([\n  React.PropTypes.string, \n  React.PropTypes.number\n])}"
      angular2:
        js: "@Input() myVar: string | number;"
      angular1:
      polymer:
      vue:
        js: "{myVar: [String, Number]}"
    remarks: |
      - **Angular 2:** [Advanced Types in TypeScript](https://www.typescriptlang.org/docs/handbook/advanced-types.html)

- name: Component lifecycle methods
  comparisons:
  - label: Initialized
    frameworks:
      react: componentWillMount
      angular2: ngOnInit
      angular1: $onInit()
      polymer: created
      vue: created
    remarks: |
      - **React:** [`componentWillMount`](https://facebook.github.io/react/docs/component-specs.html#mounting-componentwillmount)
      - **Angular 1:** See [https://docs.angularjs.org/guide/component#component-based-application-architecture](https://docs.angularjs.org/guide/component#component-based-application-architecture).
  - label: DOM Ready
    frameworks:
      react: componentDidMount
      angular2: ngAfterContentInit
      angular1: $postLink
      polymer: ready
      vue: ready
    remarks: |
      - **React:** [`componentDidMount`](https://facebook.github.io/react/docs/component-specs.html#mounting-componentdidmount)
  - label: On prop change
    frameworks:
      react: willReceiveProps
      angular2: ngOnChanges
      angular1: $onChanges
      polymer: attributeChanged
      vue:
    remarks: |
      - **React:** [`willReceiveProps`](https://facebook.github.io/react/docs/component-specs.html#mounting-willreceiveprops)
  - label: Component updated
    frameworks:
      react: componentDidUpdate
      angular2:
      angular1:
      polymer:
      vue:
    remarks: |
      - **React:** [`componentDidUpdate`](https://facebook.github.io/react/docs/component-specs.html#mounting-componentdidupdate)
  - label: Before destroy
    frameworks:
      react: componentWillUnmount
      angular2:
      angular1:
      polymer:
      vue: beforeDestroy
    remarks: |
      - **React:** [`componentWillUnmount`](https://facebook.github.io/react/docs/component-specs.html#mounting-componentwillunmount)
  - label: After destroy
    frameworks:
      react:
      angular2: ngOnDestroy
      angular1: $onDestroy
      polymer: detatched
      vue: destroyed
    remarks: |
      - **React** has no `componentDidUnmount` method. See [ReactClass.js#L274](https://github.com/facebook/react/blob/ba9b985406ff56c2dea192b119328b6096895097/src/isomorphic/classic/class/ReactClass.js#L274).

- name: Templating logic
  comparisons:
  - label: Text interpolation
    frameworks:
      react: <div>{message}</div>
      angular2:
      angular1: <div>{{ message }}</div>
      polymer:
      vue: <div>{{ message }}</div>
  - label: Transform interpolation
    frameworks:
      react: <div>{filter(message)}</div>
      angular2: <div>{{ message | filter }}</div>
      angular1: <div>{{ message | filter }}</div>
      polymer:
      vue: <div>{{ message | filter }}</div>
    remarks: |
      **React** doesn't have the concept of 'filters' or 'pipes', but you can use a simple function to acheive the same result.

      - **Vue:** See [Filters](https://vuejs.org/guide/syntax.html#Filters)
  - label: Transform with arguments
    frameworks:
      react:
      angular2: "<div>{{ message | filter:'arg1':arg2 }}</div>"
      angular1: "<div>{{ message | filter:'arg1':arg2 }}</div>"
      polymer:
      vue: <div>{{ message | filter 'arg1' arg2 }}</div>
    remarks: |
      - **Angular 2:** See [Pipes](https://angular.io/docs/ts/latest/guide/pipes.html)
      - **Angular 1:** See [Filter](https://docs.angularjs.org/api/ng/filter/filter)
      - **Vue:** See [Filters](https://vuejs.org/guide/syntax.html#Filters)
  - label: Dangerous raw HTML output
    frameworks:
      react: "<div dangerouslySetInnerHTML={{__html: raw_html }} />"
      angular2: <div [innerHTML]="raw_html"></div>
      angular1: <div ng-bind-html="raw_html"></div>
      polymer:
      vue: <div>{{{ raw_html }}}</div>
    remarks: |
      Please don't use these in your programs. Filtering raw HTML on the server or in the browser will not protect you 100% against XSS. For a deeper look at the subject, please refer to the [Google Browser Security Handbook (PDF download)](https://storage.googleapis.com/google-code-attachments/browsersec/issue-8/comment-8/Google%20Browser%20Security%20Handbook.pdf) and the book [The Tangled Web: A Guide to Securing Modern Web Applications](http://lcamtuf.coredump.cx/tangled/).

      - **React:** See [Dangerously Set innerHTML](https://facebook.github.io/react/tips/dangerously-set-inner-html.html).
      - **Vue:** See [Raw HTML](https://vuejs.org/guide/syntax.html#Raw-HTML).
  - label: Bind attribute value
    frameworks:
      react: <div id={'item-' + id}></div>
      angular2: <div id="item-{{ id }}"></div>
      angular1: <div id="item-{{ id }}"></div>
      polymer:
      vue: <div id="item-{{ id }}"></div>
    remarks: |
      - **Angular 2:** See [Attribute, class, and style bindings](https://angular.io/docs/ts/latest/guide/template-syntax.html#!#attribute-class-and-style-bindings)
      - **Vue:** See [Attributes](https://vuejs.org/guide/syntax.html#Attributes)
  - label: DOM add/remove
    frameworks:
      react: "shouldShow ? <div></div> : null"
      angular2: <div *ngIf="shouldShow"></div>
      angular1: <div ng-if='shouldShow'></div>
      polymer: <div dom-if='shouldShow'><div>
      vue: <div v-if='shouldShow'><div>
    remarks: |
      - **Angular 2:** See [Angular Cheat Sheet](https://angular.io/docs/ts/latest/guide/cheatsheet.html).
  - label: Repeat
    frameworks:
      react: items.map(item => <div></div>)
      angular2: <div *ngFor="let item of items"></div>
      angular1:
      polymer:
      vue: <div v-for="item in items"></div>
  - label: Bind event handler
    frameworks:
      react: <div onClick={clicked}></div>
      angular2: <button (click)="clicked()">
      angular1: <div ng-click="clicked()"></div>
      polymer:
      vue: <div v-on:click="clicked"></div>
