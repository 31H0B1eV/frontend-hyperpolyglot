- name: Components
  comparisons:
  - label: Define Component
    frameworks:
      react: class Component extends React.Component
      angular: module.component('component-name', {})
      ember: Ember.Component.extend({})
      polymer: Polymer({})
      vue: Vue.extend({})

- name: Component communication
  comparisons:
  - label: One-way data binding
    frameworks:
      react: <Child foo={bar} />
      angular: <Child foo='scope.bar' />
      ember: "{{child foo=bar}}"
      polymer: "<Child foo='{\"serialized\": \"object\"}' />"
      vue: <Child :foo='bar' />
  - label: String literal prop
    frameworks:
      react: <Child foo='bar' />
      angular: <Child foo='bar' />
      ember: "{{child foo='bar'}}"
      polymer: <Child foo='bar' />
      vue: <Child foo='bar' />
  - label: Two-way data binding
    frameworks:
      react: (not supported)
      angular: <input ng-model="foo" />
      ember: Ember.computed.alias('parent.foo')
      polymer: <Child foo='bar' />
      vue: <input v-model="foo" />
  - label: Prop validation
    frameworks:
      react: "propTypes:"
      angular:
      ember:
      polymer:
      vue: "props:"

- name: Component lifecycle methods
  comparisons:
  - label: Initialized
    frameworks:
      react: componentWillMount
      angular: ngOnInit
      ember: init
      polymer: created
      vue: created
  - label: DOM Ready
    frameworks:
      react: componentDidMount
      angular: ngAfterContentInit
      ember: didRender
      polymer: ready
      vue: ready
  - label: Before destroy
    frameworks:
      react: componentWillUnmount?
      angular: ngOnDestroy
      ember:
      polymer:
      vue:
  - label: After destroy
    frameworks:
      react:
      angular:
      ember:
      polymer:
      vue: destroyed

- name: Templating logic
  comparisons:
  - label: CSS show/hide
    frameworks:
      react: "<div style={{display: shouldShow}}>hi</div>"
      angular: <div ng-show='shouldShow'></div>
      ember:
      polymer:
      vue: <div v-show='shouldShow'><div>
  - label: DOM add/remove
    frameworks:
      react: "shouldShow ? <div></div> : null"
      angular: <div ng-if='shouldShow'></div>
      ember: "{{#if shouldShow}}<div></div>{{/if}}"
      polymer: <div dom-if='shouldShow'><div>
      vue: <div v-if='shouldShow'><div>
  - label: Repeat
    frameworks:
      react: items.map(item => <div></div>)
      angular: <div *ngFor="let item of items"></div>
      ember:
      polymer:
      vue: <div v-for="item in items"></div>
  - label: Bind event handler
    frameworks:
      react: <div onClick={clicked}></div>
      angular: <div ng-click="clicked()"></div>
      ember:
      polymer:
      vue: <div v-on:click="clicked"></div>
